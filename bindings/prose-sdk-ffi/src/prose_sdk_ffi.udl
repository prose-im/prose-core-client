namespace prose_core_ffi {
    void set_logger(Logger logger, LogLevel max_level);
};

[Custom]
typedef string PathBuf;
[Custom]
typedef string Url;
[Custom]
typedef string MessageId;
[Custom]
typedef string StanzaId;
[Custom]
typedef string Emoji;
[Custom]
typedef i64 DateTime;

interface Client {
    [Throws=ClientError]
    constructor(JID jid, string cache_dir, ClientDelegate? delegate);
};

callback interface ClientDelegate {
    void handle_event(ClientEvent event);
};

interface AccountBookmarksClient {
    constructor(PathBuf bookmarks_path);

    [Throws=ClientError]
    sequence<AccountBookmark> load_bookmarks();
    [Throws=ClientError]
    void add_bookmark([ByRef] JID jid, boolean select_bookmark);
    [Throws=ClientError]
    void remove_bookmark([ByRef] JID jid);
    [Throws=ClientError]
    void select_bookmark([ByRef] JID jid);
};

enum LogLevel {
    "Trace",
    "Debug",
    "Info",
    "Warn",
    "Error"
};

callback interface Logger {
    void log(LogLevel level, string message);
};

[Enum]
interface ClientEvent {
    ComposingUsersChanged(JID conversation);
    ConnectionStatusChanged(ConnectionEvent event);
    ContactChanged(JID jid);
    AvatarChanged(JID jid);
    MessagesAppended(JID conversation, sequence<MessageId> message_ids);
    MessagesUpdated(JID conversation, sequence<MessageId> message_ids);
    MessagesDeleted(JID conversation, sequence<MessageId> message_ids);
};

[Enum]
interface ConnectionEvent {
    Connect();
    Disconnect(ConnectionError? error);
};

[Error]
interface ConnectionError {
  TimedOut();
  InvalidCredentials();
  Generic(string msg);
};

dictionary JID {
  string? node;
  string domain;
};

[Error]
interface ClientError {
    Generic(string msg);
};

[Error]
enum JidParseError {
    /// Happens when the node is empty, that is the string starts with a @.
    "NodeEmpty",

    /// Happens when there is no domain, that is either the string is empty,
    /// starts with a /, or contains the @/ sequence.
    "DomainEmpty",

    /// Happens when the resource is empty, that is the string ends with a /.
    "ResourceEmpty",

    /// Happens when the localpart is longer than 1023 bytes.
    "NodeTooLong",

    /// Happens when the domain is longer than 1023 bytes.
    "DomainTooLong",

    /// Happens when the resource is longer than 1023 bytes.
    "ResourceTooLong",

    /// Happens when the localpart is invalid according to nodeprep.
    "NodePrep",

    /// Happens when the domain is invalid according to nameprep.
    "NamePrep",

    /// Happens when the resource is invalid according to resourceprep.
    "ResourcePrep",

    /// Happens when there is no resource, that is string contains no /.
    "ResourceMissingInFullJid",

    /// Happens when parsing a bare JID and there is a resource.
    "ResourceInBareJid",
};

enum Availability {
    "Available",
    "Unavailable",
    "DoNotDisturb",
    "Away",
};

enum Group {
    "Favorite",
    "Team",
    "Other",
};

dictionary UserStatus {
    string emoji;
    string? status;
};

dictionary Contact {
    JID jid;
    string name;
    Availability availability;
    UserStatus? status;
    Group group;
};

dictionary Address {
    string? locality;
    string? country;
};

dictionary UserProfile {
    string? first_name;
    string? last_name;
    string? nickname;
    string? org;
    string? role;
    string? title;
    string? email;
    string? tel;
    Url? url;
    Address? address;
};

dictionary AccountBookmark {
    JID jid;
    boolean is_selected;
};